service: academy-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  environment:
    tableName: OnlineAcademy

  # added as recommended by serverless
  lambdaHashingVersion: 20201221

  # deprecated warning moving to 3.0 format
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          # Resource: 'arn:aws:dynamodb:us-east-1:*:*:table/${self.provider.environment.tableName}'
          Resource: 'arn:aws:dynamodb:us-east-1:*:*'

functions:
  create:
    # Defines an HTTP API endpoint that calls the create function in course.js
    # - path: url path is /courses
    # - method: POST request
    # - authorizer: authenticate using the AWS IAM role
    handler: course.create
    events:
      - http:
          path: courses
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the get function in course.js
    # - path: url path is /courses/{id}
    # - method: GET request
    # - authorizer: authenticate using the AWS IAM role
    handler: course.get
    events:
      - http:
          path: courses/{id}
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the update function in course.js
    # - path: url path is /courses/{id}
    # - method: PUT request
    # - authorizer: authenticate using the AWS IAM role
    handler: course.update
    events:
      - http:
          path: courses/{id}
          method: put
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the list function in course.js
    # - path: url path is /courses
    # - method: GET request
    # - authorizer: authenticate using the AWS IAM role
    handler: course.list
    events:
      - http:
          path: courses
          method: get
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the remove function in course.js
    # - path: url path is /courses/{id}
    # - method: DELETE request
    # - authorizer: authenticate using the AWS IAM role
    handler: course.remove
    events:
      - http:
          path: courses/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # - ${file(resources/dynamodb-table.yml)}
